@model E_commerceWebsite.ViewModels.UserManagementViewModel

@{
    Layout = "~/Views/Shared/AdminLayout.cshtml";
    ViewData["Title"] = "Admin Dashboard - User Management";
}

<style>

    /* General Page Styling */
    .container {
        max-width: 1200px;
    }

    /* Heading */
    h2 {
        font-size: 2rem;
        font-weight: 700;
    }

    /* User Summary Cards */
    .card {
        transition: transform 0.2s ease-in-out;
        border-radius: 10px;
    }

        .card:hover {
            transform: scale(1.03);
        }

        .card h5 {
            font-size: 1.1rem;
            font-weight: 600;
        }

        .card p {
            font-size: 1.8rem;
            font-weight: bold;
        }

    /* Filter Section */
    .bg-light {
        background: #f8f9fa !important;
        border-radius: 8px;
        padding: 20px;
    }

    form label {
        font-weight: 600;
    }

    .form-control {
        border-radius: 5px;
        padding: 10px;
    }

    /* User Table */
    .table {
        border-radius: 10px;
        overflow: hidden;
    }

        .table thead {
            background: #343a40;
            color: white;
        }

        .table tbody tr:hover {
            background-color: rgba(0, 123, 255, 0.1);
        }

    /* Status Badges */
    .bg-success {
        background-color: #28a745 !important;
        color: white;
        padding: 5px 10px;
        border-radius: 5px;
    }

    .bg-danger {
        background-color: #dc3545 !important;
        color: white;
        padding: 5px 10px;
        border-radius: 5px;
    }

    /* Buttons */
    .btn {
        border-radius: 5px;
        padding: 8px 12px;
        font-weight: 600;
    }

    .btn-primary {
        background-color: #007bff;
        border: none;
    }

        .btn-primary:hover {
            background-color: #0056b3;
        }

    .btn-secondary {
        background-color: #6c757d;
        border: none;
    }

        .btn-secondary:hover {
            background-color: #5a6268;
        }

    .btn-danger {
        background-color: #dc3545;
        border: none;
    }

        .btn-danger:hover {
            background-color: #c82333;
        }

    .btn-success {
        background-color: #28a745;
        border: none;
    }

        .btn-success:hover {
            background-color: #218838;
        }

    /* Pagination */
    .pagination .page-item .page-link {
        color: #007bff;
    }

    .pagination .page-item.active .page-link {
        background-color: #007bff;
        color: white;
        border: none;
    }

    .pagination .page-item.disabled .page-link {
        color: #ccc;
    }

    /* Admin Creation Form */
    .bg-white {
        border-radius: 10px;
    }

        .bg-white h5 {
            font-weight: 700;
        }

    #fullName, #username, #password {
        padding: 10px;
        border-radius: 5px;
    }

    .fa-user-plus {
        margin-right: 5px;
    }

</style>

<div class="container mt-5">
    <!-- Heading -->
    <h2 class="text-center mb-5 text-dark fw-bold">User Management Dashboard</h2>

    <!-- User Summary Cards -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card text-center p-3 shadow-sm" style="background-color: #f9f9f9; border-left: 5px solid #007bff;">
                <h5 class="text-primary">Total Users</h5>
                <p class="fs-4 fw-bold text-dark">@(@Model.UserCounts.ActiveUsers + Model.UserCounts.InactiveUsers)</p>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card text-center p-3 shadow-sm" style="background-color: #e6fff9; border-left: 5px solid #28a745;">
                <h5 class="text-success">Active Users</h5>
                <p class="fs-4 fw-bold text-dark">@Model.UserCounts.ActiveUsers</p>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card text-center p-3 shadow-sm" style="background-color: #ffe6e6; border-left: 5px solid #dc3545;">
                <h5 class="text-danger">Inactive Users</h5>
                <p class="fs-4 fw-bold text-dark">@Model.UserCounts.InactiveUsers</p>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card text-center p-3 shadow-sm" style="background-color: #fff9e6; border-left: 5px solid #ffc107;">
                <h5 class="text-warning">Admins</h5>
                <p class="fs-4 fw-bold text-dark">@Model.UserCounts.Admins</p>
            </div>
        </div>
    </div>

    <!-- Filters -->
    <div class="mb-4">
        <div class="bg-light p-4 rounded shadow-sm">
            <h5 class="fw-bold mb-3">Filter Users</h5>
            <form class="row" method="get">
                <div class="col-md-5 mb-3">
                    <label class="fw-bold">Status</label>
                    <select class="form-control" name="status">
                        <option value="" selected="@(string.IsNullOrEmpty(Model.Status) ? "selected" : null)">All</option>
                        <option value="active" selected="@(Model.Status == "active" ? "selected" : null)">Active</option>
                        <option value="inactive" selected="@(Model.Status == "inactive" ? "selected" : null)">Inactive</option>
                    </select>
                </div>
                <div class="col-md-5 ">
                    <label class="fw-bold">Search by Name/Email</label>
                    <input type="text" class="form-control" name="searchTerm" placeholder="Enter name or email" value="@Model.SearchTerm">
                </div>
                <div class="col-md-2 d-flex flex-column justify-content-end">
                    <button type="submit" class="btn btn-primary mb-2">Apply Filters</button>
                    <a href="@Url.Action("UserManagement", "User")" class="btn btn-secondary">Clear Filters</a>
                </div>
            </form>
        </div>
    </div>

    <!-- User Table -->
    <div class="table-responsive">
        <table class="table table-bordered table-hover shadow-sm">
            <thead class="thead-dark">
                <tr>
                    <th>User ID</th>
                    <th>Name</th>
                    <th>Email</th>
                    <th>Role</th>
                    <th>Status</th>
                    <th>Date Registered</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in Model.Users)
                {
                    <tr>
                        <td>@user.Id</td>
                        <td>@user.FullName</td>
                        <td>@user.Email</td>
                        <td>@user.Role</td>
                        <td>
                            <span class="badge @(user.Status == "Active" ? "bg-success" : "bg-danger")">
                                @user.Status
                            </span>
                        </td>
                        <td>@user.DateRegistered.ToString("yyyy-MM-dd")</td>
                        <td>
                            <form action="@Url.Action("DeactivateUser", "User", new { id = user.Id })" method="post" style="display:inline;">
                                <button type="submit" class="btn btn-sm btn-danger">Deactivate</button>
                            </form>
                            <form action="@Url.Action("ActivateUser", "User", new { id = user.Id })" method="post" style="display:inline;">
                                <button type="submit" class="btn btn-sm btn-success">Activate</button>
                            </form>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Pagination -->
    <nav>
        <ul class="pagination justify-content-center">
            <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
                <a class="page-link" href="?page=@(Model.CurrentPage - 1)&status=@Model.Status&searchTerm=@Model.SearchTerm">Previous</a>
            </li>
            @for (var i = 1; i <= Model.TotalPages; i++)
            {
                <li class="page-item @(Model.CurrentPage == i ? "active" : "")">
                    <a class="page-link" href="?page=@i&status=@Model.Status&searchTerm=@Model.SearchTerm">@i</a>
                </li>
            }
            <li class="page-item @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")">
                <a class="page-link" href="?page=@(Model.CurrentPage + 1)&status=@Model.Status&searchTerm=@Model.SearchTerm">Next</a>
            </li>
        </ul>
    </nav>

    <div class="bg-white p-4 rounded shadow-sm mt-5">
        <h5 class="fw-bold mb-3">Create Admin</h5>
        <form id="createAdminForm">
            <div class="mb-3">
                <label class="fw-bold">Full Name</label>
                <input type="text" id="fullName" class="form-control" required />
            </div>
            <div class="mb-3">
                <label class="fw-bold">Username</label>
                <input type="text" id="username" class="form-control" required />
            </div>
            <div class="mb-3">
                <label class="fw-bold">Password</label>
                <input type="password" id="password" class="form-control" required />
            </div>
            <button type="submit" class="btn btn-primary w-100">
                <i class="fas fa-user-plus"></i> Create Admin
            </button>
        </form>
    </div>
    </div>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            document.getElementById("createAdminForm").addEventListener("submit", async function (event) {
                event.preventDefault();

                let fullName = document.getElementById("fullName").value;
                let username = document.getElementById("username").value;
                let password = document.getElementById("password").value;

                let formData = {
                    CreateAdmin: {
                        FullName: fullName,
                        Username: username,
                        Password: password
                    }
                };

                try {
                    let response = await fetch("/User/CreateNewAdmin", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify(formData)
                    });

                    let result = await response.json();

                    if (response.ok) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Success',
                            text: result.message || 'Admin account created successfully!',
                            confirmButtonColor: '#28a745'
                        }).then(() => {
                            location.reload(); // Reload to update user list
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: result.message || 'Something went wrong. Please try again.',
                            confirmButtonColor: '#dc3545'
                        });
                    }
                } catch (error) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'An error occurred while processing your request.',
                        confirmButtonColor: '#dc3545'
                    });
                }
            });
        });
    </script>


<script>
    document.addEventListener('DOMContentLoaded', () => {
        document.querySelectorAll('.deactivate-user-btn, .activate-user-btn').forEach(button => {
            button.addEventListener('click', () => {
                alert('User status changed successfully!');
            });
        });
    });
</script>
