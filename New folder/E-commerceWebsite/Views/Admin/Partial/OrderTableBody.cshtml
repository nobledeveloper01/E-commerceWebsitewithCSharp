@model IEnumerable<E_commerceWebsite.Data.Entities.OrderAdmin>

    <style>
    .badge {
        padding: 0.5rem;
        border-radius: 0.25rem;
        font-size: 0.9rem;
        font-weight: bold;
        text-transform: capitalize;
    }

        .badge.bg-pending {
            background-color: #ffc107; /* Yellow */
            color: #000;
        }

        .badge.bg-completed {
            background-color: #28a745; /* Green */
            color: #fff;
        }

        .badge.bg-cancelled {
            background-color: #dc3545; /* Red */
            color: #fff;
        }


    </style>

@if (!Model.Any())
{
    <tr>
        <td colspan="6" class="text-center">No orders found matching the filters.</td>
    </tr>
}
else
{
    foreach (var order in Model)
    {
        <tr>
            <td>@order.OrderId</td>
            <td>@order.CustomerName</td>
            <td>@order.OrderDate.ToShortDateString()</td>
            <td><span class="badge bg-@(order.Status.ToLower())">@order.Status</span></td>
            <td>₦@order.TotalAmount</td>
            <td>
                <button class="btn btn-sm btn-success status-btn" data-order-id="@order.OrderId" data-status="Completed">Mark Completed</button>
                <button class="btn btn-sm btn-danger status-btn" data-order-id="@order.OrderId" data-status="Cancelled">Cancel</button>
            </td>
        </tr>
    }
}

          
<script>
    document.addEventListener('DOMContentLoaded', () => {
        document.querySelectorAll('.status-btn').forEach(button => {
            button.addEventListener('click', event => {
                const orderId = event.target.getAttribute('data-order-id');
                const status = event.target.getAttribute('data-status');

                if (!orderId || !status) return;

                Swal.fire({
                    title: `Are you sure you want to mark this order as ${status}?`,
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes, update it!',
                }).then(result => {
                    if (result.isConfirmed) {
                        fetch('/Order/UpdateOrderStatus', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({ orderId, status }),
                        })
                        .then(response => {
                            if (!response.ok) {
                                return response.json().then(error => {
                                    throw new Error(error.message || 'Failed to update status');
                                });
                            }
                            return response.json();
                        })
                        .then(data => {
                            Swal.fire({
                                title: 'Success',
                                text: data.message,
                                icon: 'success',
                            });

                            const badge = event.target.closest('tr').querySelector('.badge');
                            badge.className = `badge bg-${status.toLowerCase()}`;
                            badge.textContent = status;
                        })
                        .catch(error => {
                            Swal.fire({
                                title: 'Error',
                                text: error.message,
                                icon: 'error',
                            });
                        });
                    }
                });
            });
        });
    });
</script>