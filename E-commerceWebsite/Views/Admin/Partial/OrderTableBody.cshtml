@model IEnumerable<E_commerceWebsite.Data.Entities.OrderAdmin>

<style>
    .badge {
        padding: 0.5rem;
        border-radius: 0.25rem;
        font-size: 0.9rem;
        font-weight: bold;
        text-transform: capitalize;
    }

        .badge.bg-pending-payment {
            background-color: #ffc107; /* Yellow */
            color: #000;
        }

        .badge.bg-payment-received {
            background-color: #17a2b8; /* Blue */
            color: #fff;
        }

        .badge.bg-order-dispatched {
            background-color: #ff9800; /* Orange */
            color: #fff;
        }

        .badge.bg-delivered {
            background-color: #28a745; /* Green */
            color: #fff;
        }

        .badge.bg-canceled {
            background-color: #dc3545; /* Red */
            color: #fff;
        }
</style>

@if (!Model.Any())
{
    <tr>
        <td colspan="6" class="text-center">No orders found matching the filters.</td>
    </tr>
}
else
{
    foreach (var order in Model)
    {
        <tr>
            <td>@order.OrderId</td>
            <td>@order.CustomerName</td>
            <td>@order.OrderDate.ToShortDateString()</td>
            <td><span class="badge bg-@(order.Status?.ToLower().Replace(" ", "-") ?? "pending")">@order.Status</span></td>
            <td>₦@order.TotalAmount</td>
            <td>
                @if (order.Status == "Pending Payment")
                {
                    <button class="btn btn-sm btn-primary status-btn" data-order-id="@order.OrderId" data-status="Payment Received">
                        Confirm Payment
                    </button>
                }
                else if (order.Status == "Payment Received")
                {
                    <button class="btn btn-sm btn-warning status-btn" data-order-id="@order.OrderId" data-status="Order Dispatched">
                        Dispatch Order
                    </button>
                }
                else if (order.Status == "Order Dispatched")
                {
                    <button class="btn btn-sm btn-success status-btn" data-order-id="@order.OrderId" data-status="Delivered">
                        Mark as Delivered
                    </button>
                }
                else if (order.Status == "Canceled")
                {
                    <span class="text-muted">Order Canceled</span>
                }
                else
                {
                    <span class="text-muted">No actions available</span>
                }

                @if (order.Status != "Canceled" && order.Status != "Delivered")
                {
                    <button class="btn btn-sm btn-danger cancel-btn mt-1" data-order-id="@order.OrderId">
                        Cancel Order
                    </button>
                }
            </td>
        </tr>
    }
}

<script>
    document.addEventListener('DOMContentLoaded', () => {
        // Handle status update
        document.querySelectorAll('.status-btn').forEach(button => {
            button.addEventListener('click', event => {
                const orderId = event.target.getAttribute('data-order-id');
                const status = event.target.getAttribute('data-status');

                Swal.fire({
                    title: `Are you sure you want to update the order to '${status}'?`,
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes, update it!',
                }).then(result => {
                    if (result.isConfirmed) {
                        fetch('/Order/UpdateOrderStatus', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ orderId, status }),
                        })
                            .then(response => response.json())
                            .then(data => {
                                Swal.fire({
                                    title: 'Success',
                                    text: data.message,
                                    icon: 'success',
                                });
                                window.location.reload(); // Reload the page
                            })
                            .catch(error => {
                                Swal.fire({
                                    title: 'Error',
                                    text: error.message || 'Failed to update status',
                                    icon: 'error',
                                });
                            });
                    }
                });
            });
        });

        // Handle order cancellation
        document.querySelectorAll('.cancel-btn').forEach(button => {
            button.addEventListener('click', event => {
                const orderId = event.target.getAttribute('data-order-id');

                Swal.fire({
                    title: "Are you sure you want to cancel this order?",
                    text: "This action cannot be undone!",
                    icon: "warning",
                    showCancelButton: true,
                    confirmButtonText: "Yes, cancel it!",
                    cancelButtonText: "No, keep it"
                }).then(result => {
                    if (result.isConfirmed) {
                        fetch('/Order/UpdateOrderStatus', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ orderId, status: "Canceled" }),
                        })
                            .then(response => response.json())
                            .then(data => {
                                Swal.fire({
                                    title: 'Canceled',
                                    text: data.message,
                                    icon: 'success',
                                });
                                window.location.reload(); // Reload the page
                            })
                            .catch(error => {
                                Swal.fire({
                                    title: 'Error',
                                    text: error.message || 'Failed to cancel order',
                                    icon: 'error',
                                });
                            });
                    }
                });
            });
        });
    });
</script>
