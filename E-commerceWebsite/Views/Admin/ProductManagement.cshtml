@{
    Layout = "~/Views/Shared/AdminLayout.cshtml";
    ViewData["Title"] = "Admin Dashboard - Product Management";
}

<style>
    /* General Body Styling */
    body {
        background-color: #f5f7fa;
        font-family: 'Poppins', sans-serif;
    }

    /* Card Styling */
    .card {
        background: linear-gradient(145deg, #e3e6f3, #ffffff);
        border-radius: 20px;
        box-shadow: 5px 5px 15px rgba(0, 0, 0, 0.1);
        padding: 20px;
        text-align: center;
        transition: transform 0.3s ease-in-out;
    }

        .card:hover {
            transform: scale(1.05);
        }

        .card h5 {
            font-size: 1.2rem;
            font-weight: 600;
            color: #4a4e69;
        }

        .card p {
            font-size: 2rem;
            font-weight: 700;
            color: #22223b;
        }

    /* Form Styling */
    .form-container {
        background-color: #ffffff;
        border-radius: 20px;
        padding: 30px;
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
    }

        .form-container h4 {
            color: #495057;
            font-weight: 700;
            margin-bottom: 20px;
        }

    .form-group label {
        font-weight: 600;
        color: #495057;
        margin-bottom: 10px;
        display: inline-block;
    }

    .form-control, .form-control-file {
        border-radius: 10px;
        padding: 10px;
        border: 1px solid #ced4da;
    }

    .btn {
        border-radius: 8px;
        font-size: 1rem;
        padding: 12px 20px;
    }

    .btn-primary {
        background-color: #4a4e69;
        border: none;
        color: #fff;
        transition: background-color 0.3s ease;
    }

        .btn-primary:hover {
            background-color: #22223b;
        }

    .btn-secondary {
        background-color: #9a8c98;
        color: #fff;
        border: none;
        transition: background-color 0.3s ease;
    }

        .btn-secondary:hover {
            background-color: #6d6875;
        }

    /* Product Item Styling */
    .product-item {
        background-color: #f8f9fa;
        padding: 20px;
        border-radius: 15px;
        margin-bottom: 20px;
        border: 1px solid #e2e8f0;
    }

    .delete-product {
        background-color: #e63946 !important;
        border-color: #e63946 !important;
    }

    .pagination {
        margin: 0;
    }

    .page-item.active .page-link {
        background-color: #4a4e69;
        border-color: #4a4e69;
    }

    .page-link {
        color: #4a4e69;
    }

        .page-link:hover {
            color: #22223b;
        }

    
    .modal {
        display: none; 
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5); 
        justify-content: center; 
        align-items: center;
    }

    .modal-content {
        background-color: #fff;
        padding: 20px;
        border-radius: 10px;
        width: 90%;
        max-width: 700px;
        height: 90%;
        max-height: 90vh; 
        overflow-y: auto; 
        position: relative; 
        margin: auto; 
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

        .modal-header h4 {
            margin: 0;
        }

    .modal-footer {
        display: flex;
        justify-content: flex-end;
        margin-top: 20px;
    }

    /* Add new filter styles */
    .filter-section {
        background: white;
        padding: 20px;
        border-radius: 15px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        margin-bottom: 20px;
    }

    .filter-group {
        margin-right: 20px;
        min-width: 200px;
    }

    .price-range-group {
        display: flex;
        gap: 10px;
    }

    .price-input {
        width: 120px;
    }
</style>

<div class="container mt-5">
    <!-- Heading -->
    <h2 class="text-center mb-5 text-dark fw-bold">Product Management Dashboard</h2>

    <!-- Cards Section -->
    <div class="container mt-4">
        <div class="row">
            <div class="col-md-3">
                <div class="card" data-category="men-wear">
                    <h5>Men's Wear</h5>
                    <p id="mensWear">0</p>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card" data-category="women-wear">
                    <h5>Women's Wear</h5>
                    <p id="womensWear">0</p>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card" data-category="kids-wear">
                    <h5>Kids' Wear</h5>
                    <p id="kidsWear">0</p>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card" data-category="accessories">
                    <h5>Accessories</h5>
                    <p id="accessories">0</p>
                </div>
            </div>
        </div>
    </div>

    <div class="container mt-4 d-flex justify-content-end">
        <button class="btn btn-primary" onclick="openModal()">Add New Product</button>
    </div>

    <!-- Add filter section -->
    <div class="container mt-5">
    <div class="filter-section d-flex flex-wrap align-items-center">
        <div class="filter-group">
            <input type="text" id="searchInput" class="form-control" placeholder="Search product name...">
        </div>
        <div class="filter-group">
            <select id="categoryFilter" class="form-control">
                <option value="">All Categories</option>
                <option value="men-wear">Men's Wear</option>
                <option value="women-wear">Women's Wear</option>
                <option value="kids-wear">Kid's Wear</option>
                <option value="accessories">Accessories</option>
            </select>
        </div>
        <div class="filter-group price-range-group">
            <input type="number" id="minPrice" class="form-control price-input" placeholder="Min price">
            <input type="number" id="maxPrice" class="form-control price-input" placeholder="Max price">
        </div>
        <button class="btn btn-secondary" onclick="clearFilters()">Clear Filters</button>
    </div>

    <table class="table table-striped  table-bordered mt-4">
        <thead class="table-dark">
            <tr>
                <th>Product Name</th>
                <th>Description</th>
                <th>Price</th>
                <th>Discounted Price</th>
                <th>Category</th>
                <th>Image</th>
                <th class="text-center">Actions</th>
            </tr>
        </thead>
        <tbody id="productTableBody">
            <!-- Products will be loaded dynamically here -->
        </tbody>
    </table>
    </div>
    
    <div class="d-flex justify-content-between align-items-center mt-3">
        <div id="paginationInfo" class="text-muted"></div>
        <nav>
            <ul class="pagination mb-0">
                <li class="page-item" id="prevPage">
                    <button class="page-link" onclick="changePage(currentPage - 1)">Previous</button>
                </li>
                <li class="page-item" id="nextPage">
                    <button class="page-link" onclick="changePage(currentPage + 1)">Next</button>
                </li>
            </ul>
        </nav>
    </div>


    <!-- Add Products Form Section -->
    <div class="modal" id="productModal">
        <div class="modal-content">
            <div class="modal-header">
                <h4>Add New Products</h4>
                <button type="button" class="btn btn-secondary" onclick="closeModal()">Cancel</button>
            </div>
            <form id="addProductsForm">
                <div id="productContainer">
                    <div class="product-item">
                        <h5 class="d-flex justify-content-between align-items-center">
                            Product 1
                            <button type="button" class="btn btn-sm btn-danger delete-product" disabled>Delete</button>
                        </h5>
                        <div class="form-group mb-3">
                            <label>Product Name</label>
                            <input type="text" class="form-control" name="name" placeholder="Enter product name" required>
                        </div>
                        <div class="form-group mb-3">
                            <label>Description</label>
                            <textarea class="form-control" name="description" rows="3" placeholder="Enter product description" required></textarea>
                        </div>
                        <div class="row">
                            <div class="form-group col-md-6 mb-3">
                                <label>Price</label>
                                <input type="number" class="form-control" name="price" placeholder="Enter price" required>
                            </div>
                            <div class="form-group col-md-6 mb-3">
                                <label>Discounted Price</label>
                                <input type="number" class="form-control" name="discountedPrice" placeholder="Enter discounted price">
                            </div>
                        </div>
                        <div class="form-group mb-3">
                            <label>Category</label>
                            <select class="form-control" name="category" required>
                                <option value="men-wear">Men's Wear</option>
                                <option value="women-wear">Women's Wear</option>
                                <option value="kids-wear">Kid's Wear</option>
                                <option value="accessories">Accessories</option>
                            </select>
                        </div>
                        <div class="row">
                            <div class="form-group col-md-6 mb-3">
                                <label>Colors (comma-separated)</label>
                                <input type="text" class="form-control" name="colors" placeholder="e.g., Red, Blue, Green">
                            </div>
                            <div class="form-group col-md-6 mb-3">
                                <label>Sizes (comma-separated)</label>
                                <input type="text" class="form-control" name="sizes" placeholder="e.g., S, M, L, XL">
                            </div>
                        </div>
                        <div class="form-group mb-3">
                            <label>Upload Image</label>
                            <input type="file" class="form-control-file" name="image" accept="image/*" required>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" id="addProductButton">Add Another Product</button>
                    <button type="submit" class="btn btn-primary">Submit Products</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Edit Product Modal -->
    <div class="modal" id="editProductModal">
        <div class="modal-content">
            <div class="modal-header">
                <h4>Edit Product</h4>
                <button type="button" class="btn btn-secondary" onclick="closeEditModal()">Cancel</button>
            </div>
            <form id="editProductForm">
                <!-- Hidden input for product ID -->
                <input type="hidden" id="editProductId" name="id" />
                <div class="form-group mb-3">
                    <label>Product Name</label>
                    <input type="text" class="form-control" id="editName" name="name" placeholder="Enter product name" required>
                </div>
                <div class="form-group mb-3">
                    <label>Description</label>
                    <textarea class="form-control" id="editDescription" name="description" rows="3" placeholder="Enter product description" required></textarea>
                </div>
                <div class="row">
                    <div class="form-group col-md-6 mb-3">
                        <label>Price</label>
                        <input type="number" class="form-control" id="editPrice" name="price" placeholder="Enter price" required>
                    </div>
                    <div class="form-group col-md-6 mb-3">
                        <label>Discounted Price</label>
                        <input type="number" class="form-control" id="editDiscountedPrice" name="discountedPrice" placeholder="Enter discounted price">
                    </div>
                </div>
                <div class="form-group mb-3">
                    <label>Category</label>
                    <select class="form-control" id="editCategory" name="category" required>
                        <option value="men-wear">Men's Wear</option>
                        <option value="women-wear">Women's Wear</option>
                        <option value="kids-wear">Kid's Wear</option>
                        <option value="accessories">Accessories</option>
                    </select>
                </div>
                <div class="row">
                    <div class="form-group col-md-6 mb-3">
                        <label>Colors (comma-separated)</label>
                        <input type="text" class="form-control" id="editColors" name="colors" placeholder="e.g., Red, Blue, Green">
                    </div>
                    <div class="form-group col-md-6 mb-3">
                        <label>Sizes (comma-separated)</label>
                        <input type="text" class="form-control" id="editSizes" name="sizes" placeholder="e.g., S, M, L, XL">
                    </div>
                </div>
                <div class="form-group mb-3">
                    <label>Upload Image</label>
                    <input type="file" class="form-control-file" id="editImage" name="image" accept="image/*">
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-primary">Save Changes</button>
                </div>
            </form>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    let currentPage = 1;
    const pageSize = 10; 
    let totalProducts = 0;
    let searchTerm = '';
    let selectedCategory = '';
    let minPrice = null;
    let maxPrice = null;


    document.addEventListener('DOMContentLoaded', () => {
        const productContainer = document.getElementById('productContainer');
        const addProductButton = document.getElementById('addProductButton');
        const addProductsForm = document.getElementById('addProductsForm');

        let productCount = 1;
        let deletedProductNumbers = [];

        // Add another product
        if (addProductButton) {
            addProductButton.addEventListener('click', () => {
                let productNumber = 1;

                // Reuse deleted numbers if available
                if (deletedProductNumbers.length > 0) {
                    productNumber = deletedProductNumbers.shift();
                } else {
                    productNumber = productCount++;
                }

                const productHTML = `
                            <div class="product-item mb-4 border p-3 rounded shadow-sm" data-product-number="${productNumber}">
                                <h5 class="text-primary d-flex justify-content-between align-items-center">
                                    Product ${productNumber}
                                    <button type="button" class="btn btn-sm btn-danger delete-product">Delete</button>
                                </h5>
                                <div class="form-group">
                                    <label for="name">Product Name</label>
                                    <input type="text" class="form-control" name="name" placeholder="Enter product name" required>
                                </div>
                                <div class="form-group">
                                    <label for="description">Description</label>
                                    <textarea class="form-control" name="description" rows="2" placeholder="Enter product description" required></textarea>
                                </div>
                                <div class="row">
                                    <div class="form-group col-md-6 mb-3">
                                        <label>Price</label>
                                        <input type="number" class="form-control" name="price" placeholder="Enter price" required>
                                    </div>
                                    <div class="form-group col-md-6 mb-3">
                                        <label>Discounted Price</label>
                                        <input type="number" class="form-control" name="discountedPrice" placeholder="Enter discounted price">
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label for="category">Category</label>
                                    <select class="form-control" name="category" required>
                                        <option value="men-wear">Men's Wear</option>
                                        <option value="women-wear">Women's Wear</option>
                                        <option value="kids-wear">Kid's Wear</option>
                                        <option value="accessories">Accessories</option>
                                    </select>
                                </div>
                                <div class="form-group">
                                    <label for="colors">Colors (comma-separated)</label>
                                    <input type="text" class="form-control" name="colors" placeholder="e.g., Red, Blue, Green">
                                </div>
                                <div class="form-group">
                                    <label for="sizes">Sizes (comma-separated)</label>
                                    <input type="text" class="form-control" name="sizes" placeholder="e.g., S, M, L, XL">
                                </div>
                                <div class="form-group">
                                    <label for="image">Upload Image</label>
                                    <input type="file" class="form-control-file" name="image" accept="image/*" required>
                                </div>
                            </div>`;

                if (productContainer) {
                    productContainer.insertAdjacentHTML('beforeend', productHTML);
                }

                attachDeleteHandlers();
            });
        } else {
            console.error('Add Product Button not found.');
        }

        // Handle delete
        function attachDeleteHandlers() {
            const deleteButtons = document.querySelectorAll('.delete-product');
            deleteButtons.forEach((btn) => {
                btn.onclick = () => {
                    const productItem = btn.closest('.product-item');
                    const productNumber = parseInt(productItem.dataset.productNumber, 10);

                    // Add the deleted product number back to the list
                    deletedProductNumbers.push(productNumber);
                    deletedProductNumbers.sort((a, b) => a - b); // Keep it sorted

                    productItem.remove();
                };
            });
        }

        attachDeleteHandlers();

        // Add a new product template
        if (addProductsForm) {
            addProductsForm.addEventListener('submit', async (e) => {
                e.preventDefault();

                const productElements = document.querySelectorAll('.product-item');
                const formData = new FormData();

                productElements.forEach((item, index) => {
                    const inputs = item.querySelectorAll('input, textarea, select');
                    const imageInput = item.querySelector('[name="image"]');

                    // Collect product data
                    const product = {};
                    inputs.forEach(input => {
                        if (input.name !== 'image') {
                            product[input.name] = input.value;
                        }
                    });

                    // Add product JSON
                    formData.append('products', JSON.stringify(product));

                    // Add image file
                    if (imageInput.files[0]) {
                        formData.append('images', imageInput.files[0]);
                    }
                });

                // Submit form data
                try {
                    const response = await fetch('/Admin/Product/UploadProducts', {
                        method: 'POST',
                        body: formData,
                    });

                    if (response.ok) {
                        // Success: Show a success message using Swal
                        Swal.fire({
                            icon: 'success',
                            title: 'Products uploaded successfully!',
                            text: 'Your products have been uploaded successfully.',
                        }).then(() => {
                            window.location.reload();  // Reload page or update the UI
                        });
                    } else {
                        // Error: Show an error message using Swal
                        Swal.fire({
                            icon: 'error',
                            title: 'Error uploading products',
                            text: 'There was an issue uploading the products. Please try again.',
                        });
                    }
                } catch (error) {
                    console.error('Error submitting form:', error);
                    // Error handling: Show an error message using Swal
                    Swal.fire({
                        icon: 'error',
                        title: 'Error uploading products',
                        text: 'An unexpected error occurred. Please try again later.',
                    });
                }
            });
        } else {
            console.error('Form not found.');
        }

        // Fetch product metrics
        fetch('/Admin/Product/GetProductMetrics')
            .then(response => response.json())
            .then(data => {
                document.getElementById('mensWear').innerText = data.mensWear;
                document.getElementById('womensWear').innerText = data.womensWear;
                document.getElementById('kidsWear').innerText = data.kidsWear;
                document.getElementById('accessories').innerText = data.accessories;
            })
            .catch(error => {
                console.error('Error fetching metrics:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error fetching metrics',
                    text: 'Unable to fetch product metrics at this time.',
                });
            });

        // Fetch products for the table
        fetchProducts(1);

    });

    // Modify your fetchProducts function
    function fetchProducts(page = 1) {
        // Collect filter values
        searchTerm = document.getElementById('searchInput').value;
        selectedCategory = document.getElementById('categoryFilter').value;
        minPrice = document.getElementById('minPrice').value || null;
        maxPrice = document.getElementById('maxPrice').value || null;

        const params = new URLSearchParams({
            page,
            pageSize,
            searchTerm,
            category: selectedCategory,
            minPrice,
            maxPrice
        });

        fetch(`/Admin/Product/GetAllProducts?${params}`)
            .then(response => {
                if (!response.ok) throw new Error('Network response was not ok');
                return response.json();
            })
            .then(data => {
                const products = data.items;
                totalProducts = data.totalCount;

                const tableBody = document.getElementById('productTableBody');
                tableBody.innerHTML = '';

                if (products.length === 0) {
                    tableBody.innerHTML = `<tr><td colspan="7" class="text-center">No products found.</td></tr>`;
                } else {
                    products.forEach(product => {
                        tableBody.innerHTML += `
                        <tr>
                            <td>${product.name}</td>
                            <td>${product.description}</td>
                            <td class="fw-bold text-success">${product.price}</td>
                            <td class="text-danger">${product.discountedPrice || '-'}</td>
                            <td>${product.category}</td>
                            <td><img src="${product.imageUrl}" class="img-thumbnail" width="50"></td>
                            <td>
                                <button class="btn btn-sm btn-warning" onclick="editProduct(${product.id})">Edit</button>
                                <button class="btn btn-sm btn-danger" onclick="deleteProduct(${product.id})">Delete</button>
                            </td>
                        </tr>`;
                    });
                }

                updatePaginationControls();
                updatePaginationInfo();
            })
            .catch(error => {
                console.error('Error fetching products:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error fetching products',
                    text: 'Unable to fetch products at this time.',
                });
            });
    }

    // Add event listeners for filter changes
document.getElementById('searchInput').addEventListener('input', debounce(() => fetchProducts(1), 300));
document.getElementById('categoryFilter').addEventListener('change', () => fetchProducts(1));
document.getElementById('minPrice').addEventListener('input', debounce(() => fetchProducts(1), 300));
document.getElementById('maxPrice').addEventListener('input', debounce(() => fetchProducts(1), 300));

// Add utility function for debouncing
function debounce(func, timeout = 300){
    let timer;
    return (...args) => {
        clearTimeout(timer);
        timer = setTimeout(() => { func.apply(this, args); }, timeout);
    };
}

// Add clear filters function
function clearFilters() {
    document.getElementById('searchInput').value = '';
    document.getElementById('categoryFilter').value = '';
    document.getElementById('minPrice').value = '';
    document.getElementById('maxPrice').value = '';
    fetchProducts(1);
} 

    // Add these new functions
function changePage(newPage) {
    if (newPage < 1 || newPage > Math.ceil(totalProducts / pageSize)) return;
    fetchProducts(newPage);
}

function updatePaginationControls() {
    const prevPage = document.getElementById('prevPage');
    const nextPage = document.getElementById('nextPage');
    
    prevPage.classList.toggle('disabled', currentPage === 1);
    nextPage.classList.toggle('disabled', currentPage === Math.ceil(totalProducts / pageSize));
}

function updatePaginationInfo() {
    const start = (currentPage - 1) * pageSize + 1;
    const end = Math.min(currentPage * pageSize, totalProducts);
    document.getElementById('paginationInfo').textContent = 
        `Showing ${start} to ${end} of ${totalProducts} products`;
}


    function deleteProduct(id) {
        fetch(`/Admin/Product/DeleteProduct/${id}`, { method: 'DELETE' })
            .then(response => {
                if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
                return response.json();
            })
            .then(() => fetchProducts(currentPage))
            .catch(error => console.error("Error deleting product:", error));
    }

    function openModal() {
        document.getElementById('productModal').style.display = 'flex';
    }

    function closeModal() {
        document.getElementById('productModal').style.display = 'none';
    }

    function editProduct(id) {
        fetch(`/Admin/Product/GetProductById/${id}`)
            .then(response => response.json())
            .then(product => {
                if (!product) throw new Error("Product data not found");



                document.getElementById('editProductId').value = product.id || '';
                document.getElementById('editName').value = product.name || '';
                document.getElementById('editDescription').value = product.description || '';
                document.getElementById('editPrice').value = product.price || '';
                document.getElementById('editDiscountedPrice').value = product.discountedPrice || '';
                document.getElementById('editCategory').value = product.category || '';
                document.getElementById('editColors').value = Array.isArray(product.colors) ? product.colors.join(', ') : '';
                document.getElementById('editSizes').value = Array.isArray(product.sizes) ? product.sizes.join(', ') : '';

                // Open the edit modal
                document.getElementById('editProductModal').style.display = 'block';
            })
            .catch(error => {
                console.error('Error fetching product details:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error fetching product details',
                    text: 'Unable to fetch product details at this time. Please try again later.',
                });
            });
    }

    // Close Edit Modal
    function closeEditModal() {
        document.getElementById('editProductModal').style.display = 'none';
    }

    // Submit Updated Product
    document.getElementById('editProductForm').addEventListener('submit', async (e) => {
        e.preventDefault();

        const productId = document.getElementById('editProductId').value; // Get the product ID
        if (!productId) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Product ID is missing!',
            });
            return;
        }

        const formData = new FormData();
        formData.append('name', document.getElementById('editName').value.trim());
        formData.append('description', document.getElementById('editDescription').value.trim());
        formData.append('price', document.getElementById('editPrice').value.trim());
        formData.append('discountedPrice', document.getElementById('editDiscountedPrice').value.trim());
        formData.append('category', document.getElementById('editCategory').value);
        formData.append('colors', document.getElementById('editColors').value);
        formData.append('sizes', document.getElementById('editSizes').value);

        const imageInput = document.getElementById('editImage');
        if (imageInput.files.length > 0) {
            formData.append('image', imageInput.files[0]);
        }

        try {
            const response = await fetch(`/Admin/Product/EditProduct/${productId}`, {
                method: 'PUT',
                body: formData,
            });

            if (!response.ok) throw new Error('Failed to update product');
            Swal.fire({
                icon: 'success',
                title: 'Product updated successfully!',
                text: 'Your product has been updated successfully.',
            }).then(() => {
                closeEditModal();
                fetchProducts();
            });
        } catch (error) {
            console.error('Error updating product:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error updating product',
                text: 'An unexpected error occurred. Please try again later.',
            });
        }
    });

</script>