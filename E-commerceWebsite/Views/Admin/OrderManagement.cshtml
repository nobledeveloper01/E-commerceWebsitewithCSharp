@using E_commerceWebsite.Data.Entities
@model List<OrderAdmin>

@{
    Layout = "~/Views/Shared/AdminLayout.cshtml";
    ViewData["Title"] = "Admin Dashboard - Order Management";
}

<div class="container mt-5">
    <h2 class="text-center mb-5 text-dark fw-bold">Order Management Dashboard</h2>

    <!-- Order Summary Cards -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card text-center p-3 shadow-sm" style="background-color: #f9f9f9; border-left: 5px solid #007bff;">
                <h5 class="text-primary">Total Orders</h5>
                <p class="fs-4 fw-bold text-dark">@Model.Count()</p>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card text-center p-3 shadow-sm" style="background-color: #fff9e6; border-left: 5px solid #ffc107;">
                <h5 class="text-warning">Pending Orders</h5>
                <p class="fs-4 fw-bold text-dark">@Model.Count(o => o.Status == "Pending")</p>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card text-center p-3 shadow-sm" style="background-color: #e6fff9; border-left: 5px solid #28a745;">
                <h5 class="text-success">Completed Orders</h5>
                <p class="fs-4 fw-bold text-dark">@Model.Count(o => o.Status == "Completed")</p>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card text-center p-3 shadow-sm" style="background-color: #ffe6e6; border-left: 5px solid #dc3545;">
                <h5 class="text-danger">Cancelled Orders</h5>
                <p class="fs-4 fw-bold text-dark">@Model.Count(o => o.Status == "Cancelled")</p>
            </div>
        </div>
    </div>

    <!-- Filters -->
    <div class="bg-light p-4 rounded shadow-sm mb-4">
        <h5 class="fw-bold mb-3">Filter Orders</h5>
        <form id="filterForm" class="row">
            <div class="col-md-4 mb-3">
                <label class="fw-bold">Date Range</label>
                <input type="date" id="startDate" class="form-control">
                <input type="date" id="endDate" class="form-control mt-2">
            </div>
            <div class="col-md-4 mb-3">
                <label class="fw-bold">Status</label>
                <select id="statusFilter" class="form-control">
                    <option value="">All</option>
                    <option value="Pending">Pending</option>
                    <option value="Completed">Completed</option>
                    <option value="Cancelled">Cancelled</option>
                </select>
            </div>
            <div class="col-md-4 mb-3">
                <label class="fw-bold">Customer Name</label>
                <input id="customerNameFilter" type="text" class="form-control" placeholder="Search by customer name">
            </div>
            <div class="col-md-12">
                <button type="button" id="applyFilters" class="btn btn-primary">Apply Filters</button>
            </div>
        </form>
    </div>

    <!-- Orders Table -->
    <table class="table table-bordered table-hover shadow-sm">
        <thead class="thead-dark">
            <tr>
                <th>Order ID</th>
                <th>Customer Name</th>
                <th>Order Date</th>
                <th>Status</th>
                <th>Total Amount</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @Html.Partial("~/Views/Admin/Partial/OrderTableBody.cshtml", Model)
        </tbody>
    </table>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    document.getElementById('applyFilters').addEventListener('click', () => {
        const status = document.getElementById('statusFilter').value;
        const customerName = document.getElementById('customerNameFilter').value;
        const startDate = document.getElementById('startDate').value;
        const endDate = document.getElementById('endDate').value;

        // Check if at least one filter parameter is provided
        if (!status && !customerName && !startDate && !endDate) {
            Swal.fire({
                icon: 'error',
                title: 'No Filters Provided',
                text: 'Please provide at least one filter parameter.',
            });
            return;
        }

        // Prepare filter object
        const filterData = {
            status: status || null,
            customerName: customerName || null,
            startDate: startDate ? new Date(startDate).toISOString() : null,
            endDate: endDate ? new Date(endDate).toISOString() : null,
        };

        fetch('/Order/FilterOrders', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(filterData),
        })
            .then(response => {
                if (!response.ok) {
                    return response.json().then(error => { throw new Error(error.message); });
                }
                return response.text();
            })
            .then(html => {
                document.querySelector('table tbody').innerHTML = html;
            })
            .catch(error => {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message,
                });
            });
    });

</script>
